<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- 데이터베이스 접속에 관련된 Bean 설정을 하는 곳! -->
	<!-- Root Context: defines shared resources visible to all other web components -->
		<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" scope="singleton">
			<constructor-arg ref="sqlSession"/>
		</bean>
		<bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
			<property name="configLocation" value="classpath:mybatis-config.xml"/>
			<property name="dataSource" ref="dataSource"/>
		</bean>
		<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
			<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
			<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"/>
			<property name="username" value="cc"/>
			<property name="password" value="cc"/>
			<property name="defaultAutoCommit" value="false"/>
		</bean>
		<!-- 트랜젝션 매니져 bean등록 -->
		<bean id="transactionManager" 
			  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
			<property name="dataSource" ref="dataSource"/>
		</bean>
		
		
		<!-- 어노테이션으로 트랜젝션 매니져를 설정하기 위해 추가해야 하는 설정 -->
		<!-- 어노테이션을 사용하기 위해 tx관련 스키마 추가 -->
		<tx:annotation-driven transaction-manager="transactionManager"/>
		
		<!-- 트랜젝션 매니저를 이용해 tx advice를 정의한다. -->
		<tx:advice id="txAdvice" transaction-manager="transactionManager">
			<tx:attributes>
				<tx:method name="select*" read-only="true" rollback-for="Exception"/>
				<tx:method name="insert*" rollback-for="Exception"
							propagation="REQUIRED" isolation="SERIALIZABLE"/>
				<tx:method name="update*" rollback-for="Exception"
							propagation="REQUIRED" isolation="SERIALIZABLE"/>
				<tx:method name="delete*" rollback-for="Exception"
							propagation="REQUIRED" isolation="SERIALIZABLE"/>
			</tx:attributes>
		</tx:advice>
		
		<!-- AOP(Advice + pointcut = Aspect(관점))를 이용하여 위의 txAdvice를 적용시키기 위해 advice객체가 weaving될 시점을 정해준다. -->
		<!-- pointcut을 등록해야 한다. -->
		<aop:config proxy-target-class="true">
			<aop:pointcut id="serviceMethod"
					expression="execution(* com.kh.cc..*ServiceImpl.*(..))"/>
			<aop:advisor id="transactionAdvice" pointcut-ref="serviceMethod"
					advice-ref="txAdvice"/>
		</aop:config>
		
</beans>
























